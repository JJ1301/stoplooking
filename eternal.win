--// Eternal.win Folder & Assets

local eternal = "eternal.win"
makefolder(eternal)

local player = game.Players.LocalPlayer
local username = player.Name
local displayname = player.DisplayName
local userid = player.UserId
local accountage = player.AccountAge
local executor = identifyexecutor and identifyexecutor() or "N/A"

local placeName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local placeId = game.PlaceId

local content = "Username: " .. username ..
                "\nDisplayname: " .. displayname ..
                "\nUserId: " .. userid ..
                "\nAccount Age: " .. accountage .. " days" ..
                "\n\nPlace Name: " .. placeName ..
                "\nPlace ID: " .. placeId ..
                "\n\nExecutor: " .. executor

writefile(eternal .. "\\Info.txt", content)

-- Download icons
writefile(eternal .. "\\code.png", game:HttpGet("https://raw.githubusercontent.com/JJ1301/stoplooking/main/code.png"))
writefile(eternal .. "\\eye.png", game:HttpGet("https://raw.githubusercontent.com/JJ1301/stoplooking/main/eye.png"))
writefile(eternal .. "\\settings.png", game:HttpGet("https://raw.githubusercontent.com/JJ1301/stoplooking/main/settings.png"))

-- Preload custom assets
local codeIcon = getcustomasset(eternal .. "\\code.png")
local eyeIcon = getcustomasset(eternal .. "\\eye.png")
local settingsIcon = getcustomasset(eternal .. "\\settings.png")

--// Eternal.win Main Script

-- Services
local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local mouse = player:GetMouse()

--// Helper Functions

local toggleHitboxExpander = false
local selectionBoxes = {}
local originalSizes = {}

local boxESPEnabled = false
local espBoxes = {} 

local function setHitbox(characterOrModel, enabled)
    local hrp = characterOrModel:FindFirstChild("HumanoidRootPart") or 
               characterOrModel:FindFirstChild("Torso") or 
               characterOrModel:FindFirstChild("UpperTorso")
    
    if not hrp then return end

    if enabled then
        if not originalSizes[characterOrModel] then
            originalSizes[characterOrModel] = {
                Size = hrp.Size,
                Transparency = hrp.Transparency,
                Material = hrp.Material,
                CanCollide = hrp.CanCollide
            }
        end

        hrp.Size = Vector3.new(15, 15, 15)
        hrp.Transparency = 0.5
        hrp.Material = Enum.Material.Neon
        hrp.CanCollide = false

        if not selectionBoxes[characterOrModel] then
            local box = Instance.new("SelectionBox")
            box.Adornee = hrp
            box.Color3 = Color3.fromRGB(255, 105, 180)
            box.LineThickness = 0.05
            box.Name = "Hitbox_Highlight"
            box.Parent = hrp
            selectionBoxes[characterOrModel] = box
        end
    else
        if originalSizes[characterOrModel] then
            local original = originalSizes[characterOrModel]
            hrp.Size = original.Size
            hrp.Transparency = original.Transparency
            hrp.Material = original.Material
            hrp.CanCollide = original.CanCollide
            originalSizes[characterOrModel] = nil
        else
            hrp.Size = Vector3.new(2, 2, 1)
            hrp.Transparency = 1
            hrp.Material = Enum.Material.Plastic
            hrp.CanCollide = false
        end

        if selectionBoxes[characterOrModel] then
            selectionBoxes[characterOrModel]:Destroy()
            selectionBoxes[characterOrModel] = nil
        end
    end
end

local function isEnemy(target)
    if not target then return false end
    
    local myTeam = player.Team
    local myCharacter = player.Character
    
    -- Check if target is a player
    local targetPlayer = nil
    for _, plr in pairs(Players:GetPlayers()) do
        if plr.Character == target then
            targetPlayer = plr
            break
        end
    end
    
    if targetPlayer then
        -- It's a player - check teams
        if targetPlayer == player then return false end
        
        -- If both have teams, compare them
        if myTeam and targetPlayer.Team then
            return myTeam ~= targetPlayer.Team
        end
        
        -- If using Team attributes
        if myCharacter and target then
            local myTeamAttr = myCharacter:GetAttribute("Team")
            local targetTeamAttr = target:GetAttribute("Team")
            if myTeamAttr and targetTeamAttr then
                return myTeamAttr ~= targetTeamAttr
            end
        end
        
        -- Default: treat as enemy if no clear team info
        return true
    else
        -- It's an NPC/Mob - check team attributes
        if myCharacter and target then
            local myTeamAttr = myCharacter:GetAttribute("Team")
            local targetTeamAttr = target:GetAttribute("Team")
            if myTeamAttr and targetTeamAttr then
                return myTeamAttr ~= targetTeamAttr
            end
        end
        
        -- Default: treat NPCs as enemies
        return true
    end
end

local function updateHitboxes()
    if not toggleHitboxExpander then
        -- Reset all hitboxes
        for characterOrModel, _ in pairs(selectionBoxes) do
            setHitbox(characterOrModel, false)
        end
        return
    end
    
    -- Players
    for _, plr in pairs(Players:GetPlayers()) do
        if plr.Character and isEnemy(plr.Character) then
            setHitbox(plr.Character, true)
        end
    end

    -- Mobs
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if mobsFolder then
        for _, mob in pairs(mobsFolder:GetChildren()) do
            if mob:IsA("Model") and mob:FindFirstChild("Humanoid") and isEnemy(mob) then
                setHitbox(mob, true)
            end
        end
    end

    -- Other potential enemies in workspace
    for _, obj in pairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj ~= player.Character then
            local humanoid = obj:FindFirstChild("Humanoid")
            local hrp = obj:FindFirstChild("HumanoidRootPart") or 
                       obj:FindFirstChild("Torso") or 
                       obj:FindFirstChild("UpperTorso")
            
            if humanoid and hrp and isEnemy(obj) then
                -- Make sure it's not a player character (already handled above)
                local isPlayerChar = false
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr.Character == obj then
                        isPlayerChar = true
                        break
                    end
                end
                
                if not isPlayerChar then
                    setHitbox(obj, true)
                end
            end
        end
    end
end

-- Auto-update for new players
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(char)
        wait(1)
        if toggleHitboxExpander and isEnemy(char) then
            setHitbox(char, true)
        end
    end)
end)

-- Auto-update for existing players
for _, plr in pairs(Players:GetPlayers()) do
    if plr ~= player then
        plr.CharacterAdded:Connect(function(char)
            wait(1)
            if toggleHitboxExpander and isEnemy(char) then
                setHitbox(char, true)
            end
        end)
    end
end

-- Auto-update for new mobs
local function setupMobsListener()
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if mobsFolder then
        mobsFolder.ChildAdded:Connect(function(mob)
            wait(0.5)
            if toggleHitboxExpander and mob:IsA("Model") and mob:FindFirstChild("Humanoid") and isEnemy(mob) then
                setHitbox(mob, true)
            end
        end)
    end
end

setupMobsListener()

workspace.ChildAdded:Connect(function(child)
    if child.Name == "Mobs" then
        setupMobsListener()
    end
end)

-- Cleanup
workspace.ChildRemoved:Connect(function(child)
    if selectionBoxes[child] then
        selectionBoxes[child] = nil
        originalSizes[child] = nil
    end
end)

-- Create a Drawing Square for ESP
local function createESPBox()
    local box = Drawing.new("Square")
    box.Visible = false
    box.Color = Color3.new(1, 0, 0)
    box.Thickness = 2
    box.Transparency = 1
    box.Filled = false
    return box
end

-- Update the ESP box position and size
local function updateESP(target, box)
    if not target or not target.Parent or not isEnemy(target) then
        box.Visible = false
        return
    end

    local hrp = target:FindFirstChild("HumanoidRootPart")
    if not hrp then
        box.Visible = false
        return
    end

    local cam = workspace.CurrentCamera
    local pos, onScreen = cam:WorldToViewportPoint(hrp.Position)
    if not onScreen then
        box.Visible = false
        return
    end

    local dist = (cam.CFrame.Position - hrp.Position).Magnitude
    local scaleFactor = 1000 / dist
    local boxWidth = math.max(scaleFactor * 4, 20)
    local boxHeight = boxWidth * 1.5

    box.Size = Vector2.new(boxWidth, boxHeight)
    box.Position = Vector2.new(pos.X - boxWidth / 2, pos.Y - boxHeight / 2)
    box.Color = Color3.new(1, 0, 0)
    box.Visible = true
end

-- Add/remove targets to the ESP table
local function addESP(target)
    if espBoxes[target] then return end
    espBoxes[target] = createESPBox()
end

local function removeESP(target)
    if espBoxes[target] then
        espBoxes[target]:Remove()
        espBoxes[target] = nil
    end
end

-- Main update loop
RunService.Heartbeat:Connect(function()
    if not boxESPEnabled then
        for _, box in pairs(espBoxes) do
            box.Visible = false
        end
        return
    end

    for target, box in pairs(espBoxes) do
        updateESP(target, box)
    end
end)

-- Detect new players spawning
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(char)
        char:WaitForChild("HumanoidRootPart", 5)
        if boxESPEnabled and isEnemy(char) then
            addESP(char)
        end
    end)
end)

-- Detect respawn for existing players
for _, plr in pairs(Players:GetPlayers()) do
    if plr ~= player then
        plr.CharacterAdded:Connect(function(char)
            char:WaitForChild("HumanoidRootPart", 5)
            if boxESPEnabled and isEnemy(char) then
                addESP(char)
            end
        end)
    end
end

-- Detect new mobs spawning
local function setupMobListenerBoxESP()
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if mobsFolder then
        mobsFolder.ChildAdded:Connect(function(mob)
            mob:WaitForChild("HumanoidRootPart", 5)
            if boxESPEnabled and mob:IsA("Model") and mob:FindFirstChild("Humanoid") and isEnemy(mob) then
                addESP(mob)
            end
        end)
    end
end

-- Run on load
setupMobListenerBoxESP()

-- If "Mobs" folder appears later
workspace.ChildAdded:Connect(function(child)
    if child.Name == "Mobs" then
        setupMobListenerBoxESP()
    end
end)

-- Cleanup when target is removed
Players.PlayerRemoving:Connect(function(plr)
    if plr.Character then
        removeESP(plr.Character)
    end
end)

workspace.DescendantRemoving:Connect(function(obj)
    if espBoxes[obj] then
        removeESP(obj)
    end
end)

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "EternalGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = game:GetService("CoreGui")

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 650, 0, 460)
mainFrame.Position = UDim2.new(0.5, -325, 0.5, -230)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = false
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 10)

local function smoothDrag(frame)
    local UIS = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")

    local dragging = false
    local dragStart = nil
    local startPos = nil

    local function update(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
        TweenService:Create(frame, TweenInfo.new(0.15, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = newPos}):Play()
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            update(input)
        end
    end)
end

smoothDrag(mainFrame)

-- Version Label
local version
pcall(function()
    version = game:HttpGet("https://raw.githubusercontent.com/JJ1301/stoplooking/refs/heads/main/version")
end)
version = version or "N/A"

local versionLabel = Instance.new("TextLabel")
versionLabel.AnchorPoint = Vector2.new(1, 1)
versionLabel.Position = UDim2.new(1, -10, 1, 0)
versionLabel.Size = UDim2.new(0, 120, 0, 20)
versionLabel.BackgroundTransparency = 1
versionLabel.Text = "Version: " .. version
versionLabel.TextColor3 = Color3.fromRGB(160, 130, 255)
versionLabel.Font = Enum.Font.FredokaOne
versionLabel.TextSize = 14
versionLabel.TextXAlignment = Enum.TextXAlignment.Right
versionLabel.Parent = mainFrame

-- Tab Frame
local tabFrame = Instance.new("Frame")
tabFrame.Size = UDim2.new(0, 150, 1, -60)
tabFrame.Position = UDim2.new(0, 0, 0, 60)
tabFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
tabFrame.BorderSizePixel = 0
tabFrame.Parent = mainFrame
Instance.new("UICorner", tabFrame).CornerRadius = UDim.new(0, 8)

-- Eternal Label
local eternalLabel = Instance.new("TextLabel")
eternalLabel.Size = UDim2.new(0, 150, 0, 25)
eternalLabel.Position = UDim2.new(0, 0, 0, 10)
eternalLabel.BackgroundTransparency = 1
eternalLabel.Text = "Eternal.win"
eternalLabel.TextColor3 = Color3.fromRGB(180, 100, 255)
eternalLabel.Font = Enum.Font.FredokaOne
eternalLabel.TextSize = 22
eternalLabel.Parent = mainFrame

-- Line
local separator = Instance.new("Frame")
separator.Size = UDim2.new(0, 150, 0, 2)
separator.Position = UDim2.new(0, 0, 0, 40)
separator.BackgroundColor3 = Color3.fromRGB(90, 70, 150)
separator.BorderSizePixel = 0
separator.Parent = mainFrame

-- Tabs Table
local tabs = {}
local function createTab(name)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -150, 1, 0)
    frame.Position = UDim2.new(0, 150, 0, 0)
    frame.BackgroundTransparency = 1
    frame.Visible = false
    frame.Parent = mainFrame
    tabs[name] = frame
    return frame
end

-- Create Tabs
local mainTab = createTab("Main")
local visualsTab = createTab("Visuals")
local settingsTab = createTab("Settings")

local buttonYOffset = 10
local function createTabButton(name, targetTab, iconPath)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 40)
    container.Position = UDim2.new(0, 10, 0, buttonYOffset)
    container.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    container.Parent = tabFrame
    Instance.new("UICorner", container).CornerRadius = UDim.new(0, 6)

    local icon = Instance.new("ImageLabel")
    icon.Size = UDim2.new(0, 28, 0, 28)
    icon.Position = UDim2.new(0, 6, 0.5, -14)
    icon.BackgroundTransparency = 1
    icon.Image = getcustomasset(iconPath)
    icon.Parent = container

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -40, 1, 0)
    label.Position = UDim2.new(0, 40, 0, 0)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.FredokaOne
    label.TextSize = 16
    label.TextColor3 = Color3.fromRGB(160, 130, 255)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Text = name
    label.Parent = container

    local clickButton = Instance.new("TextButton")
    clickButton.Size = UDim2.new(1, 0, 1, 0)
    clickButton.BackgroundTransparency = 1
    clickButton.Text = ""
    clickButton.Parent = container

    clickButton.MouseButton1Click:Connect(function()
        for _, tab in pairs(tabs) do
            tab.Visible = false
        end
        tabs[targetTab].Visible = true
    end)

    buttonYOffset = buttonYOffset + 45
end

createTabButton("Main", "Main", eternal .. "\\code.png")
createTabButton("Visuals", "Visuals", eternal .. "\\eye.png")
createTabButton("Settings", "Settings", eternal .. "\\settings.png")

-- Game Info Labels
local gameNameLabel = Instance.new("TextLabel")
gameNameLabel.Size = UDim2.new(0, 300, 0, 20)
gameNameLabel.Position = UDim2.new(0, 20, 0, 110)
gameNameLabel.BackgroundTransparency = 1
gameNameLabel.Font = Enum.Font.FredokaOne
gameNameLabel.TextSize = 16
gameNameLabel.TextXAlignment = Enum.TextXAlignment.Left
gameNameLabel.RichText = true
gameNameLabel.Text = "Game: <font color='rgb(255,100,255)'>" ..
    game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name .. "</font>"
gameNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
gameNameLabel.Parent = settingsTab

local gameIdLabel = Instance.new("TextLabel")
gameIdLabel.Size = UDim2.new(0, 300, 0, 20)
gameIdLabel.Position = UDim2.new(0, 20, 0, 135)
gameIdLabel.BackgroundTransparency = 1
gameIdLabel.Font = Enum.Font.FredokaOne
gameIdLabel.TextSize = 16
gameIdLabel.TextXAlignment = Enum.TextXAlignment.Left
gameIdLabel.RichText = true
gameIdLabel.Text = "Game ID: <font color='rgb(255,100,255)'>" .. game.PlaceId .. "</font>"
gameIdLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
gameIdLabel.Parent = settingsTab

local jobIdLabel = Instance.new("TextLabel")
jobIdLabel.Size = UDim2.new(0, 300, 0, 20)
jobIdLabel.Position = UDim2.new(0, 20, 0, 170)
jobIdLabel.BackgroundTransparency = 1
jobIdLabel.Font = Enum.Font.FredokaOne
jobIdLabel.TextSize = 16
jobIdLabel.TextXAlignment = Enum.TextXAlignment.Left
jobIdLabel.RichText = true
jobIdLabel.Text = "Job ID: <font color='rgb(255,100,255)'>" .. game.JobId .. "</font>"
jobIdLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
jobIdLabel.Parent = settingsTab

local copyJobIdButton = Instance.new("TextButton")
copyJobIdButton.Size = UDim2.new(0, 150, 0, 30)
copyJobIdButton.Position = UDim2.new(0, 20, 0, 200)
copyJobIdButton.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
copyJobIdButton.Font = Enum.Font.FredokaOne
copyJobIdButton.TextSize = 16
copyJobIdButton.TextColor3 = Color3.fromRGB(255, 100, 255)
copyJobIdButton.Text = "Copy Job ID"
copyJobIdButton.Parent = settingsTab
Instance.new("UICorner", copyJobIdButton).CornerRadius = UDim.new(0, 6)

copyJobIdButton.MouseButton1Click:Connect(function()
    setclipboard(game.JobId)
end)

-- Main Tab Buttons

-- Fixed Bring All Toggle
local bringAllToggle = Instance.new("TextButton")
bringAllToggle.Size = UDim2.new(0, 120, 0, 40)
bringAllToggle.Position = UDim2.new(0, 20, 0, 20)
bringAllToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
bringAllToggle.Text = "Bring All: OFF"
bringAllToggle.Font = Enum.Font.FredokaOne
bringAllToggle.TextColor3 = Color3.fromRGB(255, 100, 255)
bringAllToggle.TextSize = 14
bringAllToggle.Parent = mainTab
Instance.new("UICorner", bringAllToggle).CornerRadius = UDim.new(0, 6)

local bringAllEnabled = false
local bringAllConnection = nil

local function notifyNoTargets()
    local hint = Instance.new("TextLabel")
    hint.Size = UDim2.new(0, 300, 0, 30)
    hint.Position = UDim2.new(0.5, -150, 0, 10)
    hint.BackgroundColor3 = Color3.fromRGB(60, 20, 20)
    hint.Text = "No targets found!"
    hint.TextColor3 = Color3.fromRGB(255, 255, 255)
    hint.Font = Enum.Font.FredokaOne
    hint.TextSize = 14
    hint.Parent = screenGui
    Instance.new("UICorner", hint).CornerRadius = UDim.new(0, 6)

    task.delay(3, function()
        if hint and hint.Parent then 
            hint:Destroy() 
        end
    end)
end

local function isValidTarget(target)
    if not target or not target.Parent then
        return false
    end
    
    -- Skip if it's the local player
    if target == player.Character then
        return false
    end
    
    -- Check if target has a humanoid (is alive)
    local humanoid = target:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        return false
    end
    
    -- Must have a head or humanoidrootpart to teleport
    local head = target:FindFirstChild("Head")
    local hrp = target:FindFirstChild("HumanoidRootPart")
    if not head and not hrp then
        return false
    end
    
    -- Get local player's team
    local localChar = player.Character
    local localTeam = nil
    
    if localChar then
        localTeam = localChar:GetAttribute("Team")
    end
    
    -- If local player has no team attribute or team is -1, target everyone
    if not localTeam or localTeam == -1 then
        return true
    end
    
    -- Check target's team
    local targetTeam = target:GetAttribute("Team")
    
    -- If target has no team, consider it an enemy
    if not targetTeam then
        return true
    end
    
    -- Target is enemy if teams are different
    return localTeam ~= targetTeam
end

bringAllToggle.MouseButton1Click:Connect(function()
    bringAllEnabled = not bringAllEnabled
    bringAllToggle.Text = "Bring All: " .. (bringAllEnabled and "ON" or "OFF")

    if bringAllEnabled then
        bringAllConnection = RunService.RenderStepped:Connect(function()
            local camera = workspace.CurrentCamera
            if not camera then return end
            
            local localPlayer = Players.LocalPlayer
            local character = localPlayer.Character
            if not character then return end
            
            -- Bring all mobs from workspace.Mobs
            local mobsFolder = workspace:FindFirstChild("Mobs")
            if mobsFolder then
                for _, mob in pairs(mobsFolder:GetChildren()) do
                    if mob:IsA("Model") and isValidTarget(mob) then
                        local head = mob:FindFirstChild("Head")
                        local hrp = mob:FindFirstChild("HumanoidRootPart")
                        local targetPart = head or hrp
                        
                        if targetPart then
                            pcall(function()
                                targetPart.CFrame = camera.CFrame + camera.CFrame.lookVector * 7
                            end)
                        end
                    end
                end
            end

            -- Bring all other players
            for _, otherPlayer in pairs(Players:GetPlayers()) do
                if otherPlayer ~= localPlayer and otherPlayer.Character then
                    if isValidTarget(otherPlayer.Character) then
                        local head = otherPlayer.Character:FindFirstChild("Head")
                        local hrp = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
                        local targetPart = head or hrp
                        
                        if targetPart then
                            pcall(function()
                                targetPart.CFrame = camera.CFrame + camera.CFrame.lookVector * 7
                            end)
                        end
                    end
                end
            end
            
            -- Bring other NPCs/models in workspace (not in Mobs folder and not player characters)
            for _, obj in pairs(workspace:GetChildren()) do
                if obj:IsA("Model") and obj ~= character and obj.Name ~= "Mobs" then
                    -- Skip if it's a player character
                    local isPlayerChar = false
                    for _, plr in pairs(Players:GetPlayers()) do
                        if plr.Character == obj then
                            isPlayerChar = true
                            break
                        end
                    end
                    
                    if not isPlayerChar and isValidTarget(obj) then
                        local head = obj:FindFirstChild("Head")
                        local hrp = obj:FindFirstChild("HumanoidRootPart")
                        local targetPart = head or hrp
                        
                        if targetPart then
                            pcall(function()
                                targetPart.CFrame = camera.CFrame + camera.CFrame.lookVector * 7
                            end)
                        end
                    end
                end
            end
        end)
    else
        if bringAllConnection then
            bringAllConnection:Disconnect()
            bringAllConnection = nil
        end
    end
end)

-- Destroy Teams Barrier Toggle
local destroyBarrierToggle = Instance.new("TextButton")
destroyBarrierToggle.Size = UDim2.new(0, 150, 0, 40)
destroyBarrierToggle.Position = UDim2.new(0, 20, 0, 70)
destroyBarrierToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
destroyBarrierToggle.Text = "Destroy Barrier: OFF"
destroyBarrierToggle.Font = Enum.Font.FredokaOne
destroyBarrierToggle.TextColor3 = Color3.fromRGB(255, 100, 255)
destroyBarrierToggle.TextSize = 14
destroyBarrierToggle.Parent = mainTab
Instance.new("UICorner", destroyBarrierToggle).CornerRadius = UDim.new(0, 6)

local destroyBarrierEnabled = false
local destroyBarrierConnection = nil

destroyBarrierToggle.MouseButton1Click:Connect(function()
    destroyBarrierEnabled = not destroyBarrierEnabled
    destroyBarrierToggle.Text = "Destroy Barrier: " .. (destroyBarrierEnabled and "ON" or "OFF")
    
    if destroyBarrierEnabled then
        destroyBarrierConnection = RunService.Heartbeat:Connect(function()
            local character = player.Character
            if not character then return end
            
            local myTeam = character:GetAttribute("Team")
            if not myTeam then return end
            
            local mapFolder = workspace:FindFirstChild("Map")
            if not mapFolder then return end
            
            local forcefieldsFolder = mapFolder:FindFirstChild("Forcefields")
            if not forcefieldsFolder then return end
            
            -- Determine which team barriers to destroy based on player's team
            local targetName = ""
            if myTeam == 1 then
                targetName = "Team2"
            elseif myTeam == 2 then
                targetName = "Team1"
            else
                return -- Unknown team, don't destroy anything
            end
            
            -- Find and destroy enemy team barriers
            for _, part in pairs(forcefieldsFolder:GetChildren()) do
                if part:IsA("BasePart") and part.Name == targetName then
                    pcall(function()
                        part:Destroy()
                    end)
                end
            end
        end)
    else
        if destroyBarrierConnection then
            destroyBarrierConnection:Disconnect()
            destroyBarrierConnection = nil
        end
    end
end)

-- Hitbox Expander Toggle
local hitboxToggle = Instance.new("TextButton")
hitboxToggle.Size = UDim2.new(0, 120, 0, 40)
hitboxToggle.Position = UDim2.new(0, 180, 0, 70)
hitboxToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
hitboxToggle.Text = "Hitbox: OFF"
hitboxToggle.Font = Enum.Font.FredokaOne
hitboxToggle.TextColor3 = Color3.fromRGB(255, 100, 255)
hitboxToggle.TextSize = 14
hitboxToggle.Parent = mainTab
Instance.new("UICorner", hitboxToggle).CornerRadius = UDim.new(0, 6)

hitboxToggle.MouseButton1Click:Connect(function()
    toggleHitboxExpander = not toggleHitboxExpander
    hitboxToggle.Text = "Hitbox: " .. (toggleHitboxExpander and "ON" or "OFF")
    updateHitboxes()
end)

-- Auto Spawn Toggle
local autoSpawnToggle = Instance.new("TextButton")
autoSpawnToggle.Size = UDim2.new(0, 120, 0, 40)
autoSpawnToggle.Position = UDim2.new(0, 310, 0, 70)
autoSpawnToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
autoSpawnToggle.Text = "Auto Spawn: OFF"
autoSpawnToggle.Font = Enum.Font.FredokaOne
autoSpawnToggle.TextColor3 = Color3.fromRGB(255, 100, 255)
autoSpawnToggle.TextSize = 14
autoSpawnToggle.Parent = mainTab
Instance.new("UICorner", autoSpawnToggle).CornerRadius = UDim.new(0, 6)

local autoSpawnEnabled = false
local autoSpawnConnection = nil

autoSpawnToggle.MouseButton1Click:Connect(function()
    autoSpawnEnabled = not autoSpawnEnabled
    autoSpawnToggle.Text = "Auto Spawn: " .. (autoSpawnEnabled and "ON" or "OFF")
    
    if autoSpawnEnabled then
        autoSpawnConnection = RunService.Heartbeat:Connect(function()
            pcall(function()
                game:GetService("ReplicatedStorage").Network.Remotes.Spawn:FireServer(false)
            end)
        end)
    else
        if autoSpawnConnection then
            autoSpawnConnection:Disconnect()
            autoSpawnConnection = nil
        end
    end
end)

-- Reset Button
local resetButton = Instance.new("TextButton")
resetButton.Size = UDim2.new(0, 120, 0, 40)
resetButton.Position = UDim2.new(0, 440, 0, 70)
resetButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
resetButton.Text = "Reset"
resetButton.Font = Enum.Font.FredokaOne
resetButton.TextColor3 = Color3.fromRGB(255, 100, 255)
resetButton.TextSize = 14
resetButton.Parent = mainTab
Instance.new("UICorner", resetButton).CornerRadius = UDim.new(0, 6)

resetButton.MouseButton1Click:Connect(function()
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = 0
        end
    end
end)

local boxESPToggle = Instance.new("TextButton")
boxESPToggle.Size = UDim2.new(0, 150, 0, 40)
boxESPToggle.Position = UDim2.new(0, 20, 0, 20)
boxESPToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
boxESPToggle.Text = "Box ESP: OFF"
boxESPToggle.Font = Enum.Font.FredokaOne
boxESPToggle.TextColor3 = Color3.fromRGB(255, 100, 255)
boxESPToggle.TextSize = 16
boxESPToggle.Parent = visualsTab
Instance.new("UICorner", boxESPToggle).CornerRadius = UDim.new(0, 6)

boxESPToggle.MouseButton1Click:Connect(function()
    boxESPEnabled = not boxESPEnabled
    boxESPToggle.Text = "Box ESP: " .. (boxESPEnabled and "ON" or "OFF")
end)

-- Companion Toggle
local companionToggle = Instance.new("TextButton")
companionToggle.Size = UDim2.new(0, 150, 0, 40)
companionToggle.Position = UDim2.new(0, 190, 0, 20)
companionToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
companionToggle.Text = "Companion: OFF"
companionToggle.Font = Enum.Font.FredokaOne
companionToggle.TextColor3 = Color3.fromRGB(255, 100, 255)
companionToggle.TextSize = 16
companionToggle.Parent = visualsTab
Instance.new("UICorner", companionToggle).CornerRadius = UDim.new(0, 6)

local companionEnabled = false
local companionImage = Instance.new("ImageLabel")
companionImage.Size = UDim2.new(0, 240, 0, 280)
companionImage.Position = UDim2.new(1, -500, 1, -280)
companionImage.BackgroundTransparency = 1
companionImage.Image = "rbxassetid://90829454950031"
companionImage.Visible = false
companionImage.Parent = screenGui

companionToggle.MouseButton1Click:Connect(function()
    companionEnabled = not companionEnabled
    companionImage.Visible = companionEnabled
    companionToggle.Text = "Companion: " .. (companionEnabled and "ON" or "OFF")
end)

-- Unload Button
local unloadButton = Instance.new("TextButton")
unloadButton.Size = UDim2.new(0, 140, 0, 30)
unloadButton.Position = UDim2.new(0, 20, 0, 20)
unloadButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
unloadButton.Text = "Unload"
unloadButton.Font = Enum.Font.FredokaOne
unloadButton.TextColor3 = Color3.fromRGB(255, 100, 255)
unloadButton.TextSize = 16
unloadButton.Parent = settingsTab
Instance.new("UICorner", unloadButton).CornerRadius = UDim.new(0, 6)

unloadButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Rejoin Button
local rejoinButton = Instance.new("TextButton")
rejoinButton.Size = UDim2.new(0, 140, 0, 30)
rejoinButton.Position = UDim2.new(0, 180, 0, 20)
rejoinButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
rejoinButton.Text = "Rejoin"
rejoinButton.Font = Enum.Font.FredokaOne
rejoinButton.TextColor3 = Color3.fromRGB(255, 100, 255)
rejoinButton.TextSize = 16
rejoinButton.Parent = settingsTab
Instance.new("UICorner", rejoinButton).CornerRadius = UDim.new(0, 6)

rejoinButton.MouseButton1Click:Connect(function()
    local placeId = game.PlaceId
    local jobId = game.JobId
    TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
end)

-- GUI Hotkey
local hotkeyLabel = Instance.new("TextLabel")
hotkeyLabel.Size = UDim2.new(0, 100, 0, 25)
hotkeyLabel.Position = UDim2.new(0, 20, 0, 70)
hotkeyLabel.BackgroundTransparency = 1
hotkeyLabel.Text = "GUI Hotkey:"
hotkeyLabel.Font = Enum.Font.FredokaOne
hotkeyLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
hotkeyLabel.TextSize = 16
hotkeyLabel.TextXAlignment = Enum.TextXAlignment.Left
hotkeyLabel.Parent = settingsTab

local hotkeyBox = Instance.new("TextButton")
hotkeyBox.Size = UDim2.new(0, 60, 0, 25)
hotkeyBox.Position = UDim2.new(0, 130, 0, 70)
hotkeyBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
hotkeyBox.Text = "None"
hotkeyBox.Font = Enum.Font.FredokaOne
hotkeyBox.TextColor3 = Color3.fromRGB(255, 100, 255)
hotkeyBox.TextSize = 14
hotkeyBox.Parent = settingsTab
Instance.new("UICorner", hotkeyBox).CornerRadius = UDim.new(0, 5)

local currentHotkey = nil
local waitingForKey = false

hotkeyBox.MouseButton1Click:Connect(function()
    if waitingForKey then return end
    hotkeyBox.Text = "..."
    waitingForKey = true
end)

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if waitingForKey then
        waitingForKey = false
        if input.KeyCode == Enum.KeyCode.Unknown then
            hotkeyBox.Text = "Invalid"
        else
            currentHotkey = input.KeyCode
            hotkeyBox.Text = input.KeyCode.Name
        end
    elseif currentHotkey and input.KeyCode == currentHotkey then
        mainFrame.Visible = not mainFrame.Visible
    end
end)

tabs["Main"].Visible = true
